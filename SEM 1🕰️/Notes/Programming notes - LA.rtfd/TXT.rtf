{\rtf1\ansi\ansicpg1252\cocoartf2759
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica-Bold;\f1\fswiss\fcharset0 Helvetica;\f2\fmodern\fcharset0 Courier;
\f3\fswiss\fcharset0 Helvetica-BoldOblique;\f4\fmodern\fcharset0 Courier-Bold;\f5\fmodern\fcharset0 Courier-Oblique;
}
{\colortbl;\red255\green255\blue255;\red88\green196\blue193;\red34\green34\blue34;\red193\green193\blue193;
\red234\green121\blue57;\red109\green188\blue135;\red135\green135\blue135;\red191\green131\blue194;\red0\green0\blue0;
\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c40392\c80392\c80000;\cssrgb\c17647\c17647\c17647;\cssrgb\c80000\c80000\c80000;
\cssrgb\c94118\c55294\c28627;\cssrgb\c49412\c77647\c60000;\cssrgb\c60000\c60000\c60000;\cssrgb\c80000\c60000\c80392;\cssrgb\c0\c0\c0;
\csgray\c0\c0;}
\paperw11900\paperh16840\margl1440\margr1440\vieww9360\viewh18400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\qc\partightenfactor0

\f0\b\fs52 \cf0 							Python\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs32 \cf0 \
DataTypes of Python\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f1\b0 \cf0 {{\NeXTGraphic Screenshot 2024-03-13 at 1.52.29â€¯PM.png \width11600 \height7620 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\
\

\f0\b String 
\f1\b0 are iterable and can be sliced([ ] and [ : ]) and concatenate with + and \
\

\f0\b List 
\f1\b0 are iterable able are given by [ ]. It need not be on same datatype.\
\

\f0\b Tuple 
\f1\b0 are iterable and  given by (). Without bracket the sequence is consider as tuple by default. 
\f2 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 >>>\cf4 \strokec4  \cf5 \strokec5 2023\cf4 \strokec4 , \cf6 \strokec6 "Python"\cf4 \strokec4 , \cf5 \strokec5 3.11\cf4 \strokec4 , \cf5 \strokec5 5\cf2 \strokec2 +\cf5 \strokec5 6j\cf4 \strokec4 , \cf5 \strokec5 1.23E-4
\f1 \cf0 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0  It can\'92t be mutable and it is only read-only list.\
\

\f0\b Dictionary 
\f1\b0 are hash table type and given by \{\} like an object in javascript. It has key and value pair. It is not a sequence(i.e not identified by index). It is mutable.\
\

\f0\b Set 
\f1\b0 are similar to list and tuple but unique value and it stores only immutable value like int, float , complex. If we add a list in set it will through an error. It is mutable I.e it can add, delete and update.\
\

\f0\b Membership Operator:- 
\f1\b0  
\f3\i\b in
\f1\i0\b0  and 
\f3\i\b not in 
\f1\i0\b0 is an operator to check a substring and any item present within list or tuple or set or sub-list or sub-tuple. In dictionaries we can check with the key but not with the values\
\

\f0\b Identity Operator:- 
\f3\i is
\f1\i0\b0  and 
\f3\i\b is not 
\f1\i0\b0 is an operator to check whether a value holds same address or not.\
\pard\pardeftab720\partightenfactor0

\f2 \cf4 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 a \cf2 \strokec2 =\cf4 \strokec4  [\cf5 \strokec5 1\cf4 \strokec4 , \cf5 \strokec5 2\cf4 \strokec4 , \cf5 \strokec5 3\cf4 \strokec4 , \cf5 \strokec5 4\cf4 \strokec4 , \cf5 \strokec5 5\cf4 \strokec4 ]\
b \cf2 \strokec2 =\cf4 \strokec4  [\cf5 \strokec5 1\cf4 \strokec4 , \cf5 \strokec5 2\cf4 \strokec4 , \cf5 \strokec5 3\cf4 \strokec4 , \cf5 \strokec5 4\cf4 \strokec4 , \cf5 \strokec5 5\cf4 \strokec4 ]\
c \cf2 \strokec2 =\cf4 \strokec4  a\
\
\cf7 \strokec7 # Comparing and printing return values\
\cf8 \strokec8 print\cf4 \strokec4  (\cf6 \cb3 \strokec6 "id(a), id(b):"\cf4 \cb3 \strokec4 , \cf8 \strokec8 id\cf4 \strokec4 (a), \cf8 \strokec8 id\cf4 \strokec4 (b)) # gives the address\
\cf8 \strokec8 print\cf4 \strokec4 (a \cf8 \strokec8 is\cf4 \strokec4  \cf8 \strokec8 not\cf4 \strokec4  c) # false\
\cf8 \strokec8 print\cf4 \strokec4 (a \cf8 \strokec8 is\cf4 \strokec4  \cf8 \strokec8 not\cf4 \strokec4  b) # true							\
\cf9 \cb10 \

\f4\b Function\

\f5\i\b0 def
\f2\i0  greeting()\
	print(\'93hello\'94)\
\

\f4\b Keyword only
\f2\b0  function should have * before the named argument\
\cf8 \cb3 \strokec8 def\cf4 \strokec4  \cf5 \strokec5 intr\cf4 \strokec4 (amt,\cf2 \strokec2 *\cf4 \strokec4 , rate):\
	# One is position argument another is keyword argument \
   val \cf2 \strokec2 =\cf4 \strokec4  amt\cf2 \strokec2 *\cf4 \strokec4 rate\cf2 \strokec2 /\cf5 \strokec5 100\cf4 \strokec4 \
   \cf8 \strokec8 return\cf4 \strokec4  val\
\
interest \cf2 \strokec2 =\cf4 \strokec4  intr(\cf5 \strokec5 1000\cf4 \strokec4 , rate\cf2 \strokec2 =\cf5 \strokec5 10\cf4 \strokec4 )\
\cf9 \cb10 \

\f1 \cf0 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf0 \
\
}